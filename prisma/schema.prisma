generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model creator {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  profession String?
  email      String            @unique
  username   String            @unique
  password   String
  about      String?
  portfolio  String?
  linkedin   String?
  github     String?
  snippets   codeSnippet[]
  comments   comment[]
  likes      like[]
  favorites  favoriteSnippet[]
  createdAt  DateTime?         @default(now())
  updatedAt  DateTime?         @updatedAt
  reply      reply[]
  dislikes   dislike[]
}

model codeSnippet {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  code        String
  language    String
  tags        String[]
  isStale     Boolean?          @default(false)
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  deletedAt   DateTime?
  deleted     Boolean?          @default(false)
  version     String            @default("1.0.0")
  parentId    String?           @db.ObjectId
  creator     creator           @relation(fields: [creatorId], references: [id])
  creatorId   String            @db.ObjectId
  likes       like[]
  comments    comment[]
  favorites   favoriteSnippet[]
  dislikes    dislike[]
}

model like {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  creator   creator      @relation(fields: [creatorId], references: [id])
  creatorId String       @db.ObjectId
  snippet   codeSnippet? @relation(fields: [snippetId], references: [id])
  snippetId String?      @db.ObjectId
  comment   comment?     @relation(fields: [commentId], references: [id])
  commentId String?      @db.ObjectId
  reply     reply?       @relation(fields: [replyId], references: [id])
  replyId   String?      @db.ObjectId
}

model dislike {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  creator   creator      @relation(fields: [creatorId], references: [id])
  creatorId String       @db.ObjectId
  snippet   codeSnippet? @relation(fields: [snippetId], references: [id])
  snippetId String?      @db.ObjectId
  comment   comment?     @relation(fields: [commentId], references: [id])
  commentId String?      @db.ObjectId
  reply     reply?       @relation(fields: [replyId], references: [id])
  replyId   String?      @db.ObjectId
}

model comment {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  snippet   codeSnippet @relation(fields: [snippetId], references: [id])
  snippetId String      @db.ObjectId
  creator   creator     @relation(fields: [creatorId], references: [id])
  creatorId String      @db.ObjectId
  likes     like[]
  replies   reply[]
  dislikes  dislike[]
}

model reply {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  comment       comment   @relation(fields: [commentId], references: [id])
  commentId     String    @db.ObjectId
  parentReply   reply?    @relation("ParentReply", fields: [parentReplyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentReplyId String?   @db.ObjectId
  replies       reply[]   @relation("ParentReply")
  creator       creator   @relation(fields: [creatorId], references: [id])
  creatorId     String    @db.ObjectId
  likes         like[]
  dislikes      dislike[]
}

model favoriteSnippet {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  creator   creator     @relation(fields: [creatorId], references: [id])
  creatorId String      @db.ObjectId
  snippet   codeSnippet @relation(fields: [snippetId], references: [id])
  snippetId String      @db.ObjectId
}
